@page "/MedicamentosPage"
@using System.Net.Http.Json
@using FrontEndBlazor.Models
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IHttpClientFactory FabricaHttp
@inject IJSRuntime JS
@inject NavigationManager Nav

<PageTitle>Medicamentos</PageTitle>

<h3>Gestión de Medicamentos</h3>

<div class="mb-3 d-flex gap-2">
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarMedicamentos">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

<h4>Formulario de Medicamentos</h4>
<EditForm Model="MedicamentoActual" OnValidSubmit="GuardarSegunEstado">
    <DataAnnotationsValidator />
    <ValidationSummary />    

    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">ID</label>
            <InputNumber class="form-control" @bind-Value="MedicamentoActual.Id" />
        </div>
        <div class="col-md-5">
            <label class="form-label">Nombre Comercial</label>
            <InputText class="form-control" @bind-Value="MedicamentoActual.NombreComercial" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Principio Activo</label>
            <InputText class="form-control" @bind-Value="MedicamentoActual.Principio_Activo" />
        </div>  
        <div class="col-md-4">
            <label class="form-label">Presentación</label>
            <InputText class="form-control" @bind-Value="MedicamentoActual.Presentacion" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Unidad de Medida</label>
            <InputText class="form-control" @bind-Value="MedicamentoActual.Unidad_Medida" />
        </div>
        <div class="col-md-4">
            <label class="form-label">Precio Unitario</label>
            <InputNumber class="form-control" @bind-Value="MedicamentoActual.Precio_Unitario" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarMedicamento" disabled="@(!existeMedicamento)">Eliminar</button>
    </div>
</EditForm>

@if (cargando)
{
    <p><em>Cargando Medicamentos...</em></p>
}
else if (medicamentos != null && !medicamentos.Any())
{
    <p>No se encontraron Medicamentos.</p>
}
else if (medicamentos != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre Comercial</th>
                <th>Principio Activo</th>
                <th>Presentación</th>
                <th>Unidad de Medida</th>
                <th>Precio Unitario</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in medicamentos)
            {
                <tr>
                    <td>@r.Id</td>
                    <td>@r.NombreComercial</td>
                    <td>@r.Principio_Activo</td>
                    <td>@r.Presentacion</td>
                    <td>@r.Unidad_Medida</td>
                    <td>@r.Precio_Unitario</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(r))">Cargar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Medicamentos>? medicamentos;
    private Medicamentos MedicamentoActual { get; set; } = new();
    private bool existeMedicamento = false;
    private string textoBotonGuardar = "Crear";
    private bool cargando = false;
    private const string urlBaseApi = "medicamentos/medicamentos/";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Esperar un poco para asegurar que localStorage esté disponible
            await Task.Delay(200);

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");

            if (string.IsNullOrEmpty(token))
            {
                await MostrarMensaje("warning", "Acceso denegado", "Debe iniciar sesión primero.");
                await Task.Delay(1000);
                Nav.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                await CargarMedicamentos();
            }
        }
    }



    private async Task MostrarMensaje(string icon, string title, string text)
    {
        await JS.InvokeVoidAsync("Swal.fire", new
        {
            icon,
            title,
            text,
            confirmButtonText = "Aceptar",
            customClass = new { confirmButton = "swal-btn-ok" },
            buttonsStyling = false
        });
    }
    private async Task MostrarMensaje(string icon, string title, string text, int? timer)
    {
        await JS.InvokeVoidAsync("Swal.fire", new
        {
            icon,
            title,
            text,
            timer,
            showConfirmButton = false
        });
    }

    private async Task VerificarAutenticacion() { 
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token"); 
        if (string.IsNullOrEmpty(token)) { 
            await JS.InvokeVoidAsync("Swal.fire", 
            new { icon = "warning", title = "Acceso denegado", text = "Debe iniciar sesión primero." 
        , confirmButtonText = "Ir al login", customClass = new { confirmButton = "swal-btn-ok" }, buttonsStyling = false }); 
        Nav.NavigateTo("/login", forceLoad: true); } }

    private async Task<HttpClient> CrearClienteAutenticado()
    {
        var cliente = FabricaHttp.CreateClient("ApiBack");
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            cliente.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        Console.WriteLine($"🔑 TOKEN ENVIADO: {token}");
        Console.WriteLine($"📡 HEADER AUTH: {cliente.DefaultRequestHeaders.Authorization}");
        return cliente;
    }
    
    private async Task CargarMedicamentos()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (string.IsNullOrEmpty(token))
        {
            await MostrarMensaje("warning", "Sesión expirada", "Debe iniciar sesión nuevamente.");
            Nav.NavigateTo("/login", forceLoad: true);
            return;
        }
        try
        {
            cargando = true;
            StateHasChanged();

            var cliente = await CrearClienteAutenticado();
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
               // Intentar leer la lista directamente
                medicamentos = await respuesta.Content.ReadFromJsonAsync<List<Medicamentos>>() ?? new List<Medicamentos>();

                await MostrarMensaje("success", "Datos cargados", $"Se cargaron {medicamentos.Count} medicamento(s).");
            }
            else
                await MostrarMensaje("error", "Error al cargar", $"Error: {respuesta.StatusCode}");
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error al listar medicamentos", ex.Message);
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task BuscarPorCodigo()
    {
        if (MedicamentoActual.Id == 0)
        {
            await MostrarMensaje("warning", "Falta información", "Debe indicar el ID para buscar.");
            return;
        }

        try
        {
            var cliente = await CrearClienteAutenticado();
            var ruta = $"{urlBaseApi}/{MedicamentoActual.Id}";
            var respuesta = await cliente.GetAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                var respuestaApi = await respuesta.Content.ReadFromJsonAsync<RespuestaApi<Medicamentos>>();
                var encontrado = respuestaApi?.Datos;

                if (encontrado != null)
                {
                    MedicamentoActual = encontrado;
                    existeMedicamento = true;
                    textoBotonGuardar = "Actualizar";
                    await MostrarMensaje("info", "Medicamento encontrado", "Medicamento cargado en el formulario.", 1500);
                }
                else await MostrarNoEncontrado();
            }
            else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)
                await MostrarNoEncontrado();
            else
                await MostrarMensaje("error", "Error al buscar", $"Error: {respuesta.StatusCode}");
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error al buscar", ex.Message);
        }
    }

    private async Task MostrarNoEncontrado()
    {
        existeMedicamento = false;
        textoBotonGuardar = "Crear";
        await MostrarMensaje("warning", "No encontrado", "No se encontró ningún medicamento con ese ID.", 1000);
    }

    private async Task GuardarSegunEstado()
    {
        if (existeMedicamento)
            await ActualizarMedicamento();
        else
            await CrearMedicamento();
    }

    private async Task CrearMedicamento()
    {
        try
        {
            var cliente = await CrearClienteAutenticado();
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, MedicamentoActual);

            if (respuesta.IsSuccessStatusCode)
            {
                await MostrarMensaje("success", "Medicamento creado", "El medicamento se registró correctamente.", timer: 1000);
                await CargarMedicamentos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                await MostrarMensaje("error", "Error al crear", detalle);
            }
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error inesperado", ex.Message);
        }
    }

    private async Task ActualizarMedicamento()
    {
        if (MedicamentoActual.Id == 0)
        {
            await MostrarMensaje("warning", "Falta ID", "Debe indicar el ID para actualizar.");
            return;
        }

        try
        {
            var cliente = await CrearClienteAutenticado();
            var ruta = $"{urlBaseApi}/{MedicamentoActual.Id}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, MedicamentoActual);

            if (respuesta.IsSuccessStatusCode)
            {
                await MostrarMensaje("success", "Actualizado", "Medicamento actualizado correctamente.", timer: 1000);
                await CargarMedicamentos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                await MostrarMensaje("error", "No se pudo actualizar", detalle);
            }
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error al actualizar", ex.Message);
        }
    }

    private async Task EliminarMedicamento()
    {
        if (MedicamentoActual.Id == 0)
        {
            await MostrarMensaje("warning", "Falta ID", "Debe indicar el ID para eliminar.");
            return;
        }

        try
        {
            var cliente = await CrearClienteAutenticado();
            var ruta = $"{urlBaseApi}/{MedicamentoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                await MostrarMensaje("success", "Eliminado", "Medicamento eliminado correctamente.", timer: 1000);
                LimpiarFormulario();
                await CargarMedicamentos();
            }
            else
                await MostrarMensaje("error", "No se pudo eliminar", $"Error: {respuesta.StatusCode}");
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error al eliminar", ex.Message);
        }
    }

    private async Task ProbarConexion()
    {
        try
        {
            var cliente = await CrearClienteAutenticado();
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
                await MostrarMensaje("success", "Conexión correcta", "La API respondió correctamente.");
            else
                await MostrarMensaje("warning", "Advertencia", $"La API respondió con estado {(int)respuesta.StatusCode}.");
        }
        catch (Exception ex)
        {
            await MostrarMensaje("error", "Error en la conexión", ex.Message);
        }
    }

    private void CargarEnFormulario(Medicamentos r)
    {
        MedicamentoActual = new Medicamentos
        {
            Id = r.Id,
            NombreComercial = r.NombreComercial,
            Principio_Activo = r.Principio_Activo,
            Presentacion = r.Presentacion,
            Unidad_Medida = r.Unidad_Medida,
            Precio_Unitario = r.Precio_Unitario
        };
        existeMedicamento = true;
        textoBotonGuardar = "Actualizar";
    }

    private void LimpiarFormulario()
    {
        MedicamentoActual = new Medicamentos();
        existeMedicamento = false;
        textoBotonGuardar = "Crear";
    }
}

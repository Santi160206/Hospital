@page "/register"
@using System.ComponentModel.DataAnnotations
@using FrontEndBlazor.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Crear cuenta</h3>

                    <EditForm Model="model" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Usuario</label>
                            <InputText class="form-control" @bind-Value="model.Username" />
                            <ValidationMessage For="@(() => model.Username)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Nombre completo</label>
                            <InputText class="form-control" @bind-Value="model.FullName" />
                            <ValidationMessage For="@(() => model.FullName)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="model.Email" />
                            <ValidationMessage For="@(() => model.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <InputText type="password" class="form-control" @bind-Value="model.Password" />
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rol</label>
                            <InputSelect class="form-select" @bind-Value="model.Role">
                                <option value="farmaceutico">Farmacéutico</option>
                                <option value="compras">Compras</option>
                            </InputSelect>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Creando cuenta...</span>
                                }
                                else
                                {
                                    <span>Crear cuenta</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger mt-3">@error</div>
                    }

                    <div class="mt-3 text-center">
                        <p>¿Ya tienes una cuenta? <NavLink href="login">Inicia sesión aquí</NavLink></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel model = new RegisterModel();
    private string error = string.Empty;
    private bool isLoading = false;

    public class RegisterModel
    {
        [Required(ErrorMessage = "El usuario es requerido")]
        [MinLength(length: 3, ErrorMessage = "El usuario debe tener al menos 3 caracteres")]
        [MaxLength(length: 100, ErrorMessage = "El usuario no puede tener más de 100 caracteres")]
        public string Username { get; set; } = string.Empty;

        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(8, ErrorMessage = "La contraseña debe tener al menos 8 caracteres")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "El rol es requerido")]
        public string Role { get; set; } = "farmaceutico";
    }

    private async Task HandleRegister()
    {
        try
        {
            error = string.Empty;
            isLoading = true;

            if (string.IsNullOrWhiteSpace(model.Username) || string.IsNullOrWhiteSpace(model.Password))
            {
                error = "Por favor, complete todos los campos requeridos";
                return;
            }

            // Ensure role is valid
            if (model.Role != "farmaceutico" && model.Role != "compras")
            {
                model.Role = "farmaceutico";
            }

            RegisterRequest? request = new RegisterRequest
            {
                username = model.Username.Trim(),
                full_name = model.FullName?.Trim() ?? string.Empty,
                email = model.Email.Trim().ToLower(),
                password = model.Password,
                role = model.Role.ToLower()
            };

            var success = await AuthService.RegisterAsync(request);
            if (success)
            {
                // Redirigir a login para que el usuario inicie sesión
                NavigationManager.NavigateTo("/login", forceLoad: false);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

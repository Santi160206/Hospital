@page "/login"
@using System.ComponentModel.DataAnnotations
@using FrontEndBlazor.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Iniciar sesión</h3>
                    
                    <EditForm Model="model" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Usuario</label>
                            <InputText id="username" class="form-control" @bind-Value="model.Username" />
                            <ValidationMessage For="@(() => model.Username)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
                            <ValidationMessage For="@(() => model.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Iniciando sesión...</span>
                                }
                                else
                                {
                                    <span>Iniciar sesión</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="alert alert-danger mt-3">@error</div>
                    }

                    <div class="mt-3 text-center">
                        <p>¿No tienes una cuenta? <NavLink href="register">Regístrate aquí</NavLink></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private string error = string.Empty;
    private bool isLoading = false;

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es requerido")]
        [StringLength(100, MinimumLength = 3, ErrorMessage = "El usuario debe tener entre 3 y 100 caracteres")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(8, ErrorMessage = "La contraseña debe tener al menos 8 caracteres")]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        try
        {
            error = string.Empty;
            isLoading = true;

            var username = model.Username?.Trim() ?? string.Empty;
            var password = model.Password ?? string.Empty;

            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            {
                error = "Por favor, complete todos los campos";
                return;
            }

            var success = await AuthService.LoginAsync(username, password);

            if (success)
            {
                // Navegar sin forceLoad para mantener el mismo circuito de Blazor
                NavigationManager.NavigateTo("/", forceLoad: false);
            }
            else
            {
                error = "Error al iniciar sesión";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
